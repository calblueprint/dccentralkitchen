import { FontAwesome5 } from '@expo/vector-icons';
import PropTypes from 'prop-types';
import React from 'react';
import { AsyncStorage, View } from 'react-native';
import AuthTextField from '../../components/AuthTextField';
import {
  BigTitle,
  ButtonLabel,
  FilledButtonContainer,
  Subhead,
} from '../../components/BaseComponents';
import Colors from '../../constants/Colors';
import { getCustomersById, updateCustomers } from '../../lib/airtable/request';
import { encryptPassword, inputFields } from '../../lib/authUtils';
import {
  AuthScreenContainer,
  BackButton,
  FormContainer,
} from '../../styled/auth';
import validate from '../auth/validation';

export default class PasswordChangeScreen extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      customer: null,
      success: false,
      values: {
        [inputFields.NEWPASSWORD]: '',
        [inputFields.VERIFYPASSWORD]: '',
      },
      errors: {
        [inputFields.NEWPASSWORD]: '',
        [inputFields.VERIFYPASSWORD]: '',
      },
    };
  }

  // Load customer record
  async componentDidMount() {
    const customerId = await AsyncStorage.getItem('customerId');
    try {
      const customer = await getCustomersById(customerId);

      this.setState({ customer });
    } catch (err) {
      console.error(err);
    }
  }

  // Check for an error with updated text
  // Set errors and updated text in state
  updateError = async (text, inputField) => {
    let error = false;
    let errorMsg = '';
    // validate returns null if no error is found
    switch (inputField) {
      case inputFields.NEWPASSWORD:
        errorMsg = validate('password', text);
        error = errorMsg !== null;
        break;
      case inputFields.VERIFYPASSWORD:
        errorMsg =
          this.state.values[inputFields.NEWPASSWORD] ===
          this.state.values[inputFields.VERIFYPASSWORD]
            ? null
            : 'Passwords must match!';
        error = errorMsg !== null;
        break;
      default:
        console.log('Not reached');
    }
    this.setState((prevState) => ({
      errors: { ...prevState.errors, [inputField]: errorMsg },
      values: { ...prevState.values, [inputField]: text },
    }));

    return error;
  };

  // onBlur callback is required in case customer taps on field, does nothing, and taps out
  onBlur = async (inputField) => {
    await this.updateError(inputField);
  };

  // onTextChange does a check before updating errors
  // It can only remove errors, not trigger them
  onTextChange = async (text, inputField) => {
    // Only update error if there is currently an error
    // Unless field is password type
    if (
      this.state.errors[inputField] ||
      inputField === inputFields.NEWPASSWORD ||
      inputFields.VERIFYPASSWORD
    ) {
      await this.updateError(text, inputField);
    } else {
      this.setState((prevState) => ({
        values: { ...prevState.values, [inputField]: text },
      }));
    }
  };

  changePassword = async () => {
    // We use the record ID generated by Airtable as the salt to encrypt
    const encrypted = await encryptPassword(
      this.state.customer.id,
      this.state.values[inputFields.NEWPASSWORD]
    );
    // Update the created record with the encrypted password
    await updateCustomers(this.state.customer.id, { password: encrypted });
    this.setState({ success: true });
  };

  render() {
    const { errors, values } = this.state;

    // Initially, button should be disabled until all fields have been (at least) filled out
    const fieldsFilled =
      values[inputFields.NEWPASSWORD] && values[inputFields.VERIFYPASSWORD];
    const noErrors =
      !errors[inputFields.NEWPASSWORD] && !errors[inputFields.VERIFYPASSWORD];

    const permission = fieldsFilled && noErrors;

    return (
      <AuthScreenContainer>
        <BackButton onPress={() => this.props.navigation.goBack()}>
          <FontAwesome5 name="arrow-left" solid size={24} />
        </BackButton>
        {!this.state.success && (
          <View>
            <BigTitle>Set New Password</BigTitle>
            <FormContainer>
              <AuthTextField
                fieldType="New Password"
                value={this.state.values[inputFields.NEWPASSWORD]}
                onBlurCallback={(value) =>
                  this.updateError(value, inputFields.NEWPASSWORD)
                }
                changeTextCallback={(text) =>
                  this.onTextChange(text, inputFields.NEWPASSWORD)
                }
                error={this.state.errors[inputFields.NEWPASSWORD]}
              />
              <AuthTextField
                fieldType="Re-enter New Password"
                value={this.state.values[inputFields.VERIFYPASSWORD]}
                onBlurCallback={(value) =>
                  this.updateError(value, inputFields.VERIFYPASSWORD)
                }
                changeTextCallback={(text) =>
                  this.onTextChange(text, inputFields.VERIFYPASSWORD)
                }
                error={this.state.errors[inputFields.VERIFYPASSWORD]}
              />
            </FormContainer>
            <FilledButtonContainer
              style={{ marginTop: 48 }}
              color={!permission ? Colors.lightestGreen : Colors.primaryGreen}
              width="100%"
              onPress={() => this.changePassword()}
              disabled={!permission}>
              <ButtonLabel color={Colors.lightest}>Reset Password</ButtonLabel>
            </FilledButtonContainer>
          </View>
        )}

        {this.state.success && (
          <View>
            <BigTitle>Success!</BigTitle>
            <Subhead style={{ marginTop: 32 }}>
              Your new password was successfully set.
            </Subhead>
            <FilledButtonContainer
              style={{ marginTop: 48 }}
              color={Colors.primaryGreen}
              width="100%"
              onPress={() => this.props.navigation.goBack()}>
              <ButtonLabel color={Colors.lightest}>
                Back To Settings
              </ButtonLabel>
            </FilledButtonContainer>
          </View>
        )}
      </AuthScreenContainer>
    );
  }
}

PasswordChangeScreen.propTypes = {
  navigation: PropTypes.object.isRequired,
};
