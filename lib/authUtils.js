import validatejs from 'validate.js';
import { createPushTokens, updateCustomers } from './airtable/request';

// Fields

export const signUpFields = { NAME: 0, PHONENUM: 1, PASSWORD: 2 };

// newToken is the value generated by Expo; a string
// updateCustomerPushTokens is called after customer is looked up
export async function updateCustomerPushTokens(customer, newToken) {
  // If tokens are not being registered, do nothing
  if (!newToken) {
    return;
  }
  // If Notifications errored while registering token, may not have registered a pushToken initially
  // Else, we need to check if this device has already been registered to the user
  const isNew =
    'pushTokenIds' in customer &&
    'tokenNames' in customer &&
    !customer.tokenNames.includes(newToken);
  if (isNew) {
    const tokenId = await createPushTokens(newToken);
    await updateCustomers(customer.id, {
      pushTokenIds: [...customer.pushTokenIds, tokenId],
    });
  }
}

export function formatPhoneNumber(phoneNumber) {
  const onlyNumeric = phoneNumber.replace('[^0-9]', '');
  const formatted = `(${onlyNumeric.slice(0, 3)}) ${onlyNumeric.slice(
    3,
    6
  )}-${onlyNumeric.slice(6, 10)}`;
  return formatted;
}

// For future use, to match for better passwords
// TODO: @Johnathan Fix passwords check
const pattern = '((?=.*d)(?=.*[a-z])(?=.*[A-Z])(?=.*[W]).{6,20})';

// This is to create constraints for the validatejs library
const validation = {
  name: {
    presence: {
      message: '^Name cannot be blank.',
    },
  },
  phoneNumber: {
    // This verifies that it's not blank.
    presence: {
      message: '^Phone number cannot be blank.',
    },
    length: {
      is: 10,
      message: '^Must be a valid phone number',
    },
    // To check for only numbers in the future
    // format: {
    //   pattern: '/^d+$/',
    //   message: 'Phone number cannot contain non-numeric characters.'
    // }
  },

  password: {
    presence: {
      message: '^Password cannot be blank.',
    },
    length: {
      minimum: 8,
      maximum: 20,
      message: '^Must be 8-20 characters long',
    },
    // For future use for better password checking
    // format: {
    //   pattern: "[a-z0-9]+",
    //   flags: "i",
    //   message: "Must contain at least one digit, one lowercase number, and special chracter"
    // }
  },
};

// This is the validate function that utilizes validate.js
// to check a fieldname based on an inputted value.
export function validate(fieldName, value) {
  // Validate.js validates your values as an object
  // e.g. var form = {email: 'email@example.com'}
  // Line 8-9 creates an object based on the field name and field value
  const values = {};
  values[fieldName] = value;

  const constraints = {};
  constraints[fieldName] = validation[fieldName];
  // The values and validated against the constraints
  // the variable result hold the error messages of the field
  const result = validatejs(values, constraints);
  // If there is an error message, return it!
  if (result) {
    // Return only the field error message if there are multiple
    return result[fieldName][0];
  }
  // Otherwise, return null
  return null;
}
